import{_ as e,c as t,a2 as l,o as i}from"./chunks/framework.BQmytedh.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"补充知识点.md","filePath":"补充知识点.md","lastUpdated":1733835064000}'),r={name:"补充知识点.md"};function o(h,a,s,d,n,p){return i(),t("div",null,a[0]||(a[0]=[l('<h2 id="文件对象" tabindex="-1">文件对象 <a class="header-anchor" href="#文件对象" aria-label="Permalink to &quot;文件对象&quot;">​</a></h2><h3 id="blob" tabindex="-1">Blob <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;Blob&quot;">​</a></h3><p>Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。</p><h3 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-label="Permalink to &quot;File&quot;">​</a></h3><p>File 对象是特殊类型的 Blob，用于表示文件系统中的文件。它的属性是从文件系统中获取的文件元数据。</p><h3 id="base64" tabindex="-1">base64 <a class="header-anchor" href="#base64" aria-label="Permalink to &quot;base64&quot;">​</a></h3><p>base64是一种基于64个可打印字符来表示二进制数据的方法。在base64中，每个字符占6位，3个字符正好占满一个字节。</p><h3 id="filerender" tabindex="-1">fileRender <a class="header-anchor" href="#filerender" aria-label="Permalink to &quot;fileRender&quot;">​</a></h3><p>fileRender 是一个文件渲染器，可以将文件渲染成一个可预览的页面。</p><h2 id="redis" tabindex="-1">Redis <a class="header-anchor" href="#redis" aria-label="Permalink to &quot;Redis&quot;">​</a></h2><h3 id="redis是什么" tabindex="-1">Redis是什么 <a class="header-anchor" href="#redis是什么" aria-label="Permalink to &quot;Redis是什么&quot;">​</a></h3><p>Redis 是一个开源的内存数据库，它可以存储键值对，支持多种数据结构，如字符串、列表、集合、有序集合、哈希表等。</p><h3 id="redis的特点" tabindex="-1">Redis的特点 <a class="header-anchor" href="#redis的特点" aria-label="Permalink to &quot;Redis的特点&quot;">​</a></h3><ol><li>Redis 是一个基于内存的数据库，读写速度非常快。</li><li>Redis 支持多种数据结构，如字符串、列表、集合、有序集合、哈希表等。</li><li>Redis 支持数据持久化，可以将内存中的数据保存到磁盘中。</li><li>Redis 支持主从复制，可以将数据同步到多个节点。</li><li>Redis 支持事务，可以保证多个操作的原子性。</li><li>Redis 支持发布订阅模式，可以实现消息队列。</li></ol><h3 id="redis的应用场景" tabindex="-1">Redis的应用场景 <a class="header-anchor" href="#redis的应用场景" aria-label="Permalink to &quot;Redis的应用场景&quot;">​</a></h3><ol><li>缓存</li><li>计数器</li><li>分布式锁</li><li>会话管理</li><li>消息队列</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Redis 是一个nosql数据库，它是一个基于内存的数据库，读写速度非常快。 因此适合需要高性能的场景，如缓存、计数器、分布式锁、会话管理、消息队列等。</p></div><h2 id="popstate与pushstate" tabindex="-1">popstate与pushstate <a class="header-anchor" href="#popstate与pushstate" aria-label="Permalink to &quot;popstate与pushstate&quot;">​</a></h2><h3 id="popstate" tabindex="-1">popstate <a class="header-anchor" href="#popstate" aria-label="Permalink to &quot;popstate&quot;">​</a></h3><p>popstate 事件在使用 history.pushState() 或 history.replaceState() 方法时，通过浏览器的前进或后退按钮触发。每当激活同一文档中不同的历史记录条目时，popstate 事件就会在对应的 window 对象上触发。</p><h3 id="pushstate" tabindex="-1">pushstate <a class="header-anchor" href="#pushstate" aria-label="Permalink to &quot;pushstate&quot;">​</a></h3><p>pushState() 方法可以改变 URL，并且不会导致页面刷新。pushState() 方法接受三个参数，分别是一个状态对象、一个标题（目前大多数浏览器都忽略这个参数）、一个 URL。</p><div class="tip custom-block"><p class="custom-block-title">pushstate</p><ol><li>导航到新页面：当用户点击一个链接或按钮时，你可以使用 pushState 方法来更新 URL，并加载新页面的内容，而无需重新加载整个页面。</li><li>动态加载内容：在单页应用中，当你通过 AJAX 请求加载新内容时，可以使用 pushState 方法来更新 URL，以便用户可以通过浏览器的前进和后退按钮导航。</li><li>表单提交：在处理表单提交时，可以使用 pushState 方法来更新 URL，而不重新加载页面。</li></ol></div><h2 id="浏览器状态码" tabindex="-1">浏览器状态码 <a class="header-anchor" href="#浏览器状态码" aria-label="Permalink to &quot;浏览器状态码&quot;">​</a></h2><h3 id="_1xx" tabindex="-1">1xx <a class="header-anchor" href="#_1xx" aria-label="Permalink to &quot;1xx&quot;">​</a></h3><p>1xx 状态码表示请求已被接受，需要继续处理。</p><h3 id="_2xx" tabindex="-1">2xx <a class="header-anchor" href="#_2xx" aria-label="Permalink to &quot;2xx&quot;">​</a></h3><p>2xx 状态码表示请求已成功被服务器接收、理解、并接受。</p><h3 id="_3xx" tabindex="-1">3xx <a class="header-anchor" href="#_3xx" aria-label="Permalink to &quot;3xx&quot;">​</a></h3><p>3xx 状态码表示需要客户端采取进一步的操作才能完成请求。</p><h3 id="_4xx" tabindex="-1">4xx <a class="header-anchor" href="#_4xx" aria-label="Permalink to &quot;4xx&quot;">​</a></h3><p>4xx 状态码表示客户端看起来可能发生了错误，妨碍了服务器的处理。</p><h3 id="_5xx" tabindex="-1">5xx <a class="header-anchor" href="#_5xx" aria-label="Permalink to &quot;5xx&quot;">​</a></h3><p>5xx 状态码表示服务器在处理请求的过程中有错误或者异常状态发生。</p><div class="warning custom-block"><p class="custom-block-title">常用状态码</p><h3 id="_200" tabindex="-1">200 <a class="header-anchor" href="#_200" aria-label="Permalink to &quot;200&quot;">​</a></h3><p>200 状态码表示请求已成功，请求所希望的响应头或数据体将随此响应返回。</p><h3 id="_301" tabindex="-1">301 <a class="header-anchor" href="#_301" aria-label="Permalink to &quot;301&quot;">​</a></h3><p>301 状态码表示请求的资源已被分配了新的 URL，以后应使用资源的新 URL。</p><h3 id="_302" tabindex="-1">302 <a class="header-anchor" href="#_302" aria-label="Permalink to &quot;302&quot;">​</a></h3><p>302 状态码表示请求的资源现在临时从不同的 URL 响应请求。</p><h3 id="_304" tabindex="-1">304 <a class="header-anchor" href="#_304" aria-label="Permalink to &quot;304&quot;">​</a></h3><p>304 状态码表示自从上次请求后，请求的网页未修改过。</p><h3 id="_400" tabindex="-1">400 <a class="header-anchor" href="#_400" aria-label="Permalink to &quot;400&quot;">​</a></h3><p>400 状态码表示服务器未能理解请求。</p><h3 id="_401" tabindex="-1">401 <a class="header-anchor" href="#_401" aria-label="Permalink to &quot;401&quot;">​</a></h3><p>401 状态码表示请求要求用户的身份认证。</p><h3 id="_403" tabindex="-1">403 <a class="header-anchor" href="#_403" aria-label="Permalink to &quot;403&quot;">​</a></h3><p>403 状态码表示服务器拒绝请求。</p><h3 id="_404" tabindex="-1">404 <a class="header-anchor" href="#_404" aria-label="Permalink to &quot;404&quot;">​</a></h3><p>404 状态码表示服务器找不到请求的资源。</p><h3 id="_500" tabindex="-1">500 <a class="header-anchor" href="#_500" aria-label="Permalink to &quot;500&quot;">​</a></h3><p>500 状态码表示服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。</p><h3 id="_502" tabindex="-1">502 <a class="header-anchor" href="#_502" aria-label="Permalink to &quot;502&quot;">​</a></h3><p>502 状态码表示服务器作为网关或代理，从上游服务器收到无效响应。</p><h3 id="_503" tabindex="-1">503 <a class="header-anchor" href="#_503" aria-label="Permalink to &quot;503&quot;">​</a></h3><p>503 状态码表示服务器目前无法使用（由于超载或停机维护）。</p><h3 id="_504" tabindex="-1">504 <a class="header-anchor" href="#_504" aria-label="Permalink to &quot;504&quot;">​</a></h3><p>504 状态码表示服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p><h3 id="_505" tabindex="-1">505 <a class="header-anchor" href="#_505" aria-label="Permalink to &quot;505&quot;">​</a></h3><p>505 状态码表示服务器不支持请求中所要求的 HTTP 协议版本。</p></div><h2 id="requestidlecallback" tabindex="-1">requestIdleCallback <a class="header-anchor" href="#requestidlecallback" aria-label="Permalink to &quot;requestIdleCallback&quot;">​</a></h2><p>requestIdleCallback() 方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响像动画和输入响应等延迟敏感的事件。</p>',37)]))}const b=e(r,[["render",o]]);export{u as __pageData,b as default};

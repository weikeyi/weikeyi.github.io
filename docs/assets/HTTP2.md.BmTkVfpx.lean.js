import{_ as a,c as e,a2 as s,o as T}from"./chunks/framework.BQmytedh.js";const r="/assets/HTTP1_HTTP2.DwLeG84v.png",o="/assets/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8.FExHUXWE.png",i="/assets/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E5%B8%A7.BmsIhmN_.png",l="/assets/%E5%A4%B4%E9%83%A8%E5%8E%8B%E7%BC%A9.CzBQC2gc.png",_=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"HTTP2.md","filePath":"HTTP2.md","lastUpdated":null}'),n={name:"HTTP2.md"};function p(c,t,P,h,H,d){return T(),e("div",null,t[0]||(t[0]=[s('<h2 id="http2" tabindex="-1">HTTP2 <a class="header-anchor" href="#http2" aria-label="Permalink to &quot;HTTP2&quot;">​</a></h2><h3 id="判断http1和http2" tabindex="-1">判断HTTP1和HTTP2 <a class="header-anchor" href="#判断http1和http2" aria-label="Permalink to &quot;判断HTTP1和HTTP2&quot;">​</a></h3><p><img src="'+r+'" alt="HTTP1/2"></p><h3 id="http2的优势" tabindex="-1">HTTP2的优势 <a class="header-anchor" href="#http2的优势" aria-label="Permalink to &quot;HTTP2的优势&quot;">​</a></h3><ol><li>多路复用(Multiplexing): HTTP/2只需要一个连接就可以实现多个请求和响应，而HTTP/1.1每个请求都需要建立一个连接。 <img src="'+o+'" alt="HTTP2"></li><li>二进制分帧: HTTP/2在应用层和传输层之间增加了一个二进制分帧层，将所有传输的信息分割为更小的消息和帧，并对它们进行二进制编码。 <img src="'+i+'" alt="HTTP2"></li><li>头部压缩: HTTP/2使用HPACK算法对首部进行压缩，减少了首部的大小。 <img src="'+l+'" alt="HTTP2"></li></ol>',5)]))}const E=a(n,[["render",p]]);export{_ as __pageData,E as default};
